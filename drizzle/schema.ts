import { pgTable, foreignKey, serial, integer, varchar, numeric, date, text, doublePrecision, boolean, timestamp, bigint, unique, real } from "drizzle-orm/pg-core"
import { relations, sql } from "drizzle-orm"



export const f1 = pgTable("f1", {
	id: serial("id_").primaryKey().notNull(),
	idUsuario: integer("id_usuario").notNull().references(() => compradores.id),
	idPricelist: integer("id_pricelist").notNull().references(() => compradores.id),
	distribuidor: varchar("distribuidor"),
	linkRentabilidad: varchar("link_rentabilidad"),
	productoLinkWalmart: varchar("producto_link_walmart"),
	description: varchar("description"),
	linkAmazon: varchar("link_amazon"),
	upc: varchar("upc"),
	upcListing: varchar("upc_listing"),
	walmartId: varchar("walmart_id"),
	pack: integer("pack"),
	packPrice: numeric("pack_price", { precision: 3, scale: 2 }),
	itemNumber: varchar("item_number"),
	buyBoxPrice: numeric("buy_box_price", { precision: 3, scale: 2 }),
	totalGrosFees: numeric("total_gros_fees", { precision: 3, scale: 2 }),
	category: varchar("category"),
	hazmat: varchar("hazmat"),
	weight: numeric("weight", { precision: 3, scale: 2 }),
	length: numeric("length_", { precision: 3, scale: 2 }),
	width: numeric("width", { precision: 3, scale: 2 }),
	height: numeric("height", { precision: 3, scale: 2 }),
	lb: numeric("lb", { precision: 3, scale: 2 }),
	unitNet: numeric("unit_net", { precision: 3, scale: 2 }),
	roi: numeric("roi", { precision: 3, scale: 2 }),
	margin: numeric("margin", { precision: 3, scale: 2 }),
	netPorcentaje: numeric("net_porcentaje", { precision: 3, scale: 2 }),
	walmartSalesDataSpark: numeric("walmart_sales_data_spark", { precision: 3, scale: 2 }),
	amazonSales: numeric("amazon_sales", { precision: 3, scale: 2 }),
	reviewsTotales: integer("reviews_totales"),
	competitiveWfsSellers: integer("competitive_wfs_sellers"),
	notes: varchar("notes"),
	approval: varchar("approval"),
	disapproval: varchar("disapproval"),
	fulfillmentFee: numeric("fulfillment_fee", { precision: 3, scale: 2 }),
	referralFee: numeric("referral_fee", { precision: 3, scale: 2 }),
	cost: numeric("cost_", { precision: 3, scale: 2 }),
	monthlyStore: numeric("monthly_store", { precision: 3, scale: 2 }),
	fecha: date("fecha"),
});

export const f2 = pgTable("f2", {
	id: serial("id").primaryKey().notNull(),
	idF1: integer("id_f1").references(() => f1.id),
	idUsuario: integer("id_usuario").references(() => compradores.id),
	productoLinkWalmart: varchar("producto_link_walmart"),
	linkAmazon: varchar("link_amazon"),
	description: varchar("description"),
	upcDist: varchar("upc_dist"),
	walmartId: varchar("walmart_id"),
	pack: integer("pack"),
	itemNumber: varchar("item_number"),
	buyBoxPrice: numeric("buy_box_price", { precision: 3, scale: 2 }),
	packPrice: numeric("pack_price", { precision: 3, scale: 2 }),
	cost: numeric("cost_", { precision: 3, scale: 2 }),
	costFees: numeric("cost_fees", { precision: 3, scale: 2 }),
	category: varchar("category"),
	totalCost: numeric("total_cost", { precision: 3, scale: 2 }),
	totalSales: numeric("total_sales", { precision: 3, scale: 2 }),
	net: numeric("net", { precision: 3, scale: 2 }),
	unitNet: numeric("unit_net", { precision: 3, scale: 2 }),
	roi: numeric("roi", { precision: 3, scale: 2 }),
	margin: numeric("margin", { precision: 3, scale: 2 }),
	netPorcentaje: numeric("net_porcentaje", { precision: 3, scale: 2 }),
	discount: numeric("discount", { precision: 3, scale: 2 }),
	discountPorcentaje: numeric("discount_porcentaje", { precision: 3, scale: 2 }),
	discountPackPrice: numeric("discount_pack_price", { precision: 3, scale: 2 }),
	walmartSalesHelium: numeric("walmart_sales_helium", { precision: 3, scale: 2 }),
	walmartSalesDataspark: numeric("walmart_sales_dataspark", { precision: 3, scale: 2 }),
	reviews: numeric("reviews", { precision: 3, scale: 2 }),
	competitiveWfsSellers: integer("competitive_wfs_sellers"),
	amazonSalesAsinzen: numeric("amazon_sales_asinzen", { precision: 3, scale: 2 }),
	amazonSalesKeppa: numeric("amazon_sales_keppa", { precision: 3, scale: 2 }),
	buyBoxAmazon: numeric("buy_box_amazon", { precision: 3, scale: 2 }),
	salesToBuy: numeric("sales_to_buy", { precision: 3, scale: 2 }),
	unitsToBuy: numeric("units_to_buy", { precision: 3, scale: 2 }),
	buyboxPorcentaje: numeric("buybox_porcentaje", { precision: 3, scale: 2 }),
	stockDays: integer("stock_days"),
	stockChecker: integer("stock_checker"),
	timeMonths: integer("time_months"),
	salesMonths: integer("sales_months"),
	comments: varchar("comments_"),
	notasFiltro1: varchar("notas_filtro_1"),
	notaComprasFiltro2: varchar("nota_compras_filtro_2"),
	approval: varchar("approval"),
	disapproval: varchar("disapproval"),
	lb: numeric("lb", { precision: 3, scale: 2 }),
	fulfillmentFee: numeric("fulfillment_fee", { precision: 3, scale: 2 }),
	referralFee: integer("referral_fee"),
	costAux: numeric("cost_aux", { precision: 3, scale: 2 }),
	monthlyStore: numeric("monthly_store", { precision: 3, scale: 2 }),
	casePack: integer("case_pack"),
	upcListing: varchar("upc_listing"),
	fecha: date("fecha"),
	supplier: varchar("supplier"),
	descriptionProduct: varchar("description_product"),
	weight: numeric("weight", { precision: 3, scale: 2 }),
	length: numeric("length_", { precision: 3, scale: 2 }),
	width: numeric("width", { precision: 3, scale: 2 }),
	height: numeric("height", { precision: 3, scale: 2 }),
	idUnico: varchar("id_unico"),
	hazmat: varchar("hazmat"),
});

export const f3 = pgTable("f3", {
	id: serial("id").primaryKey().notNull(),
	idF2: integer("id_f2").notNull().references(() => f2.id),
	idUsuario: integer("id_usuario").notNull().references(() => compradores.id),
	supplier: varchar("supplier"),
	productoLinkWalmart: varchar("producto_link_walmart"),
	linkAmazon: varchar("link_amazon"),
	description: varchar("description"),
	walmartId: integer("walmart_id"),
	pack: integer("pack"),
	itemNumber: varchar("item_number"),
	upcDist: varchar("upc_dist"),
	buyBoxPrice: numeric("buy_box_price", { precision: 3, scale: 2 }),
	unitCost: numeric("unit_cost", { precision: 3, scale: 2 }),
	totalCostWalmartFees: numeric("total_cost_walmart_fees", { precision: 3, scale: 2 }),
	category: varchar("category"),
	applyDiscount: varchar("apply_discount"),
	totalCost: numeric("total_cost", { precision: 3, scale: 2 }),
	totalSales: numeric("total_sales", { precision: 3, scale: 2 }),
	unitDiscount: numeric("unit_discount", { precision: 3, scale: 2 }),
	discountPackPrice: numeric("discount_pack_price", { precision: 3, scale: 2 }),
	net: numeric("net", { precision: 3, scale: 2 }),
	unitNet: numeric("unit_net", { precision: 3, scale: 2 }),
	roi: numeric("roi", { precision: 3, scale: 2 }),
	margin: numeric("margin", { precision: 3, scale: 2 }),
	netPorcentaje: numeric("net_porcentaje", { precision: 3, scale: 2 }),
	discountPorcentaje: numeric("discount_porcentaje", { precision: 3, scale: 2 }),
	walmartSalesHelium: integer("walmart_sales_helium"),
	walmartSalesDataSpark: integer("walmart_sales_data_spark"),
	reviews: integer("reviews"),
	competitiveWfsSellers: integer("competitive_wfs_sellers"),
	amazonSalesAsinzen: integer("amazon_sales_asinzen"),
	amazonSalesKeppa: varchar("amazon_sales_keppa"),
	buyBoxAmazon: numeric("buy_box_amazon", { precision: 3, scale: 2 }),
	unitsToBuy: numeric("units_to_buy", { precision: 3, scale: 2 }),
	salesToBuy: numeric("sales_to_buy", { precision: 3, scale: 2 }),
	buyboxPorcentaje: numeric("buybox_porcentaje", { precision: 3, scale: 2 }),
	stockDays: integer("stock_days"),
	stockCheckerVentas: integer("stock_checker_ventas"),
	timeMonths: integer("time_months"),
	salesMonths: integer("sales_months"),
	comments: varchar("comments_"),
	notaCompras: varchar("nota_compras"),
	notaComprasF2: varchar("nota_compras_f2"),
	notas: varchar("notas"),
	approval: varchar("approval"),
	disapproval: varchar("disapproval"),
	lb: numeric("lb", { precision: 3, scale: 2 }),
	hazmat: varchar("hazmat"),
	fulfillmentFee: numeric("fulfillment_fee", { precision: 3, scale: 2 }),
	referralFee: numeric("referral_fee", { precision: 4, scale: 2 }),
	cost: numeric("cost_", { precision: 3, scale: 2 }),
	monthlyStore: numeric("monthly_store", { precision: 5, scale: 5 }),
	casePack: integer("case_pack"),
	upcListing: varchar("upc_listing"),
	descriptionProduct: varchar("description_product"),
	lbFiltro1: numeric("lb_filtro_1", { precision: 3, scale: 2 }),
	length: numeric("length_", { precision: 3, scale: 2 }),
	width: numeric("width_", { precision: 3, scale: 2 }),
	height: numeric("height_", { precision: 3, scale: 2 }),
	timestampAproval: varchar("timestamp_aproval"),
	idAsin: varchar("id_asin"),
	idItemNumber: varchar("id_item_number"),
	responsableF1: varchar("responsable_f1"),
	inventario: varchar("inventario"),
});

export const imagen2 = pgTable("imagen2", {
	id: serial("id").primaryKey().notNull(),
	sku: text("sku_").references(() => inventory2.sku),
	imagenUrl: text("imagen_url"),
});



export const infoproveedor = pgTable("infoproveedor", {
	id: serial("id").primaryKey().notNull(),
	proveedor: text("proveedor"),
	streetAddress: text("street_address"),
	responsable: text("responsable"),
	city: text("city"),
	phone: text("phone"),
	mail: text("mail"),
	idproveedor: integer("idproveedor").references(() => proveedores.id),
});

export const enProceso = pgTable("en_proceso", {
	id: serial("id").primaryKey().notNull(),
	upcProveedor: varchar("upc_proveedor", { length: 14 }).references(() => providerUpc.id),
	nombre: varchar("nombre", { length: 25 }),
	título: varchar("título"),
	precio: doublePrecision("precio"),
	asignadof1: varchar("asignadof1", { length: 25 }),
	fechaasignado: date("fechaasignado"),
	revisadof1: boolean("revisadof1"),
	revisadof2: boolean("revisadof2"),
	revisadof3: boolean("revisadof3"),
	emisión: boolean("emisión"),
	rechazado: varchar("rechazado", { length: 25 }),
	comprado: boolean("comprado"),
	mostrar: varchar("mostrar", { length: 25 }),
	precioDeWalmart: doublePrecision("precio_de_walmart"),
	precioAmazon: doublePrecision("precio_amazon"),
	contracCategory: text("contrac_category"),
	competidoresWalmartWfs: integer("competidores_walmart_wfs"),
	fullfimentFee: doublePrecision("fullfiment_fee"),
	referealFee: doublePrecision("refereal_fee"),
	netoProbable: doublePrecision("neto_probable"),
	idProveedor: integer("id_proveedor").references(() => proveedores.id),
	walmarid: text("walmarid"),
	asin: text("asin"),
	packageheight: doublePrecision("packageheight"),
	packagelength: doublePrecision("packagelength"),
	packagewidth: doublePrecision("packagewidth"),
	packageweight: doublePrecision("packageweight"),
	notas: text("notas"),
	cantidadComprar: integer("cantidad_comprar"),
	hazmant: boolean("hazmant"),
	apperel: boolean("apperel"),
	bestseller: boolean("bestseller"),
	popularpick: boolean("popularpick"),
	case: integer("case_"),
	itemNumber: text("item_number"),
	revisionF1: timestamp("revision_f1", { mode: 'string' }).defaultNow(),
	revisionF2: timestamp("revision_f2", { mode: 'string' }),
	revisionF3: timestamp("revision_f3", { mode: 'string' }),
	revisionEmision: timestamp("revision_emision", { mode: 'string' }),
	asignadof2: varchar("asignadof2", { length: 25 }),
	pack: integer("pack").default(1),
	revisionInventario: timestamp("revision_inventario", { withTimezone: true, mode: 'string' }),
});

export const enProcesoHistorial = pgTable("en_proceso_historial", {
	id: serial("id").primaryKey().notNull(),
	upcProveedor: varchar("upc_proveedor", { length: 14 }).references(() => providerUpc.id),
	nombre: varchar("nombre", { length: 25 }),
	título: varchar("título"),
	precio: doublePrecision("precio"),
	asignadof1: varchar("asignadof1", { length: 25 }),
	fechaasignado: date("fechaasignado"),
	revisadof1: boolean("revisadof1"),
	revisadof2: boolean("revisadof2"),
	revisadof3: boolean("revisadof3"),
	emisión: boolean("emisión"),
	rechazado: varchar("rechazado", { length: 25 }),
	comprado: boolean("comprado"),
	mostrar: varchar("mostrar", { length: 25 }),
	precioDeWalmart: doublePrecision("precio_de_walmart"),
	precioAmazon: doublePrecision("precio_amazon"),
	contracCategory: text("contrac_category"),
	competidoresWalmartWfs: integer("competidores_walmart_wfs"),
	fullfimentFee: doublePrecision("fullfiment_fee"),
	referealFee: doublePrecision("refereal_fee"),
	netoProbable: doublePrecision("neto_probable"),
	idProveedor: integer("id_proveedor").references(() => proveedores.id),
	walmarid: text("walmarid"),
	asin: text("asin"),
	packageheight: doublePrecision("packageheight"),
	packagelength: doublePrecision("packagelength"),
	packagewidth: doublePrecision("packagewidth"),
	packageweight: doublePrecision("packageweight"),
	notas: text("notas"),
	cantidadComprar: integer("cantidad_comprar"),
	hazmant: boolean("hazmant"),
	apperel: boolean("apperel"),
	bestseller: boolean("bestseller"),
	popularpick: boolean("popularpick"),
	case: integer("case_"),
	itemNumber: text("item_number"),
	numberPio: text("number_pio"),
	revisionF1: timestamp("revision_f1", { mode: 'string' }).defaultNow(),
	revisionF2: timestamp("revision_f2", { mode: 'string' }),
	revisionF3: timestamp("revision_f3", { mode: 'string' }),
	revisionEmision: timestamp("revision_emision", { mode: 'string' }),
	asignadof2: varchar("asignadof2", { length: 25 }),
	pack: integer("pack"),
	revisionInventario: timestamp("revision_inventario", { withTimezone: true, mode: 'string' }),
});

export const reporteWill = pgTable("Reporte_will", {
	revisionF1: timestamp("revision_f1", { mode: 'string' }),
	asignadof1: text("asignadof1"),
	rechazado: text("rechazado"),
	revisadof1: boolean("revisadof1"),
	revisadof2: boolean("revisadof2"),
});

export const reporteWill2 = pgTable("Reporte_will_2", {
	asignado: text("Asignado"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	total: bigint("Total", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	desaprobados: bigint("Desaprobados", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	aprovado: bigint("Aprovado", { mode: "number" }),
	fecha: text("Fecha"),
});

export const prismaMigrations = pgTable("_prisma_migrations", {
	id: varchar("id", { length: 36 }).primaryKey().notNull(),
	checksum: varchar("checksum", { length: 64 }).notNull(),
	finishedAt: timestamp("finished_at", { withTimezone: true, mode: 'string' }),
	migrationName: varchar("migration_name", { length: 255 }).notNull(),
	logs: text("logs"),
	rolledBackAt: timestamp("rolled_back_at", { withTimezone: true, mode: 'string' }),
	startedAt: timestamp("started_at", { withTimezone: true, mode: 'string' }).defaultNow().notNull(),
	appliedStepsCount: integer("applied_steps_count").default(0).notNull(),
});


export const compradores = pgTable("compradores", {
	id: serial("id").primaryKey().notNull(),
	nombre: varchar("nombre"),
	password: varchar("password", { length: 30 }),
	usuario: varchar("usuario", { length: 255 }),
},
	(table) => {
		return {
			compradoresUsuarioKey: unique("compradores_usuario_key").on(table.usuario),
		}
	});

export const inventory2His = pgTable("inventory2_his", {
	status: text("status"),
	upcSupplier: text("upc_supplier"),
	gtin: text("gtin"),
	sku: text("sku").notNull(),
	description: text("description"),
	itemId: text("item_id"),
	pack: integer("pack"),
	itemNumberSupplier: text("item_number_supplier"),
	cogs: doublePrecision("cogs"),
	cogsInPack: doublePrecision("cogs_in_pack"),
	outboundShippingWeight: doublePrecision("outbound_shipping_weight"),
	weightLb: doublePrecision("weight_lb"),
	unitsConfirm: doublePrecision("units_confirm"),
	unitsInWh: doublePrecision("units_in_wh"),
	unitsInTransit: doublePrecision("units_in_transit"),
	unitsToCharge: doublePrecision("units_to_charge"),
	unitsInWm: doublePrecision("units_in_wm"),
	packsInWm: doublePrecision("packs_in_wm"),
	unitsReturned: doublePrecision("units_returned"),
	unitsDamaged: doublePrecision("units_damaged"),
	link: text("link_"),
	linkAmazon: text("link_amazon"),
	categoria: text("categoria"),
	lengthIn: doublePrecision("length_in"),
	widthIn: doublePrecision("width_in"),
	heightIn: doublePrecision("height_in"),
	totalCostFees: doublePrecision("total_cost_fees"),
	estCommission: doublePrecision("est_commission"),
	cogsFee: doublePrecision("cogs_fee"),
	hazmat: text("hazmat"),
	ohXProduct: doublePrecision("oh_x_product"),
	stock: doublePrecision("stock"),
	stockValues: doublePrecision("stock_values"),
	fechaModificacion: date("fecha_modificacion"),
	id: serial("id").primaryKey().notNull(),
});

export const pricelistAsiganacionF1 = pgTable("pricelist_asiganacion_f1", {
	id: serial("id").primaryKey().notNull(),
	idPricelistPagina: integer("id_pricelist_pagina").references(() => pricelistPagina.id),
});

export const orderSales2 = pgTable("order_sales_2", {
	id: serial("id").primaryKey().notNull(),
	fechaCreacion: date("fecha_creacion"),
	ordenSalesId: text("orden_sales_id"),
	gtim: text("gtim"),
	sku: text("sku").references(() => inventory2.sku),
	wmtId: text("wmt_id"),
	itemsName: text("items_name"),
	quantity: integer("quantity"),
	gmv: doublePrecision("gmv"),
	orderStatus: text("order_status"),
	shippedDate: date("shipped_date"),
	shippedFrom: text("shipped_from"),
	shipToCity: text("ship_to_city"),
	shipToState: text("ship_to_state"),
	shipToZip: text("ship_to_zip"),
	purchaseOrderNum: text("purchase_order_num"),
	neto: doublePrecision("neto"),
	cogs: doublePrecision("cogs"),
	fees: doublePrecision("fees"),
	fechaSql: date("fecha_sql"),
	fullFeed: doublePrecision("full_feed"),
	referalFeed: doublePrecision("referal_feed"),
});

export const walmartId = pgTable("walmart_id", {
	id: serial("id").primaryKey().notNull(),
	itemId: text("item_id").notNull(),
	providerUpc: varchar("provider_upc", { length: 14 }).references(() => providerUpc.id),
	timestamp: timestamp("timestamp", { mode: 'string' }).defaultNow(),
});

export const productPackage = pgTable("product_package", {
	id: serial("id").primaryKey().notNull(),
	idProviderUpc: varchar("id_provider_upc", { length: 14 }).notNull().references(() => providerUpc.id),
	asin: text("asin").notNull(),
	image: text("image").notNull(),
	height: real("height").notNull(),
	length: real("length").notNull(),
	width: real("width").notNull(),
	weight: real("weight").notNull(),
	quantity: integer("quantity").notNull(),
	size: text("size"),
	timestamp: timestamp("timestamp", { mode: 'string' }).defaultNow().notNull(),
});

export const inventory2 = pgTable("inventory2", {
	status: text("status"),
	upcSupplier: text("upc_supplier"),
	gtin: text("gtin"),
	sku: text("sku").primaryKey().notNull(),
	description: text("description"),
	itemId: text("item_id"),
	pack: integer("pack"),
	itemNumberSupplier: text("item_number_supplier"),
	cogs: doublePrecision("cogs"),
	cogsInPack: doublePrecision("cogs_in_pack"),
	outboundShippingWeight: doublePrecision("outbound_shipping_weight"),
	weightLb: doublePrecision("weight_lb"),
	unitsConfirm: doublePrecision("units_confirm"),
	unitsInWh: doublePrecision("units_in_wh"),
	unitsInTransit: doublePrecision("units_in_transit"),
	unitsToCharge: doublePrecision("units_to_charge"),
	unitsInWm: doublePrecision("units_in_wm"),
	packsInWm: doublePrecision("packs_in_wm"),
	unitsReturned: doublePrecision("units_returned"),
	unitsDamaged: doublePrecision("units_damaged"),
	link: text("link_"),
	linkAmazon: text("link_amazon"),
	categoria: text("categoria"),
	lengthIn: doublePrecision("length_in"),
	widthIn: doublePrecision("width_in"),
	heightIn: doublePrecision("height_in"),
	totalCostFees: doublePrecision("total_cost_fees"),
	estCommission: doublePrecision("est_commission"),
	cogsFee: doublePrecision("cogs_fee"),
	hazmat: text("hazmat"),
	ohXProduct: doublePrecision("oh_x_product"),
	stock: doublePrecision("stock"),
	stockValues: doublePrecision("stock_values"),
	brand: text("brand"),
});

export const refoundReturns2 = pgTable("refound_returns_2", {
	id: serial("id").primaryKey().notNull(),
	orderId: text("order_id"),
	producName: text("produc_name"),
	returnReason: text("return_reason"),
	returnDate: date("return_date"),
	currentSatatus: text("current_satatus"),
	unit: integer("unit"),
	po: text("po"),
	poLine: integer("po_line"),
	rma: text("rma"),
	returnOrdenLine: integer("return_orden_line"),
	fault: text("fault"),
	deliveredDate: date("delivered_date"),
	receivedScanDate: date("received_scan_date"),
	disposition: text("disposition"),
	itemCondition: text("item_condition"),
	upc: text("upc_"),
	currentTrackingStatus: text("current_tracking_status"),
	shipping: doublePrecision("Shipping"),
});

export const tablaEvelyn = pgTable("tabla_evelyn", {
	orderId: text("order_id"),
	sku: text("sku"),
	fechaCreacion: date("fecha_creacion"),
	quantity: integer("quantity"),
	gmv: doublePrecision("gmv"),
	cogs: doublePrecision("cogs"),
	fullFeed: doublePrecision("full_feed"),
	neto: doublePrecision("neto"),
	fechaEntrega: date("fecha_entrega"),
});

export const tablaEvelynFull = pgTable("tabla_evelyn_full", {
	orderId: text("order_id"),
	sku: text("sku"),
	fechaCreacion: date("fecha_creacion"),
	quantity: integer("quantity"),
	gmv: doublePrecision("gmv"),
	cogs: doublePrecision("cogs"),
	fullFeed: doublePrecision("full_feed"),
	neto: doublePrecision("neto"),
	fechaEntrega: date("fecha_entrega"),
});

export const walmartDepartments = pgTable("walmart_departments", {
	id: integer("id").primaryKey().notNull(),
	department: text("department").notNull(),
	superDepartmentNumber: integer("super_department_number").notNull(),
	superDepartmentName: text("super_department_name").notNull(),
	superDepartmentsId: integer("super_departments_id").notNull(),
	updateAt: timestamp("update_at", { mode: 'string' }).defaultNow(),
});

export const proveedores = pgTable("proveedores", {
	id: serial("id").primaryKey().notNull(),
	nombre: varchar("nombre"),
	descuento: doublePrecision("descuento"),
});

export const walmartTopProducts = pgTable("walmart_top_products", {
	id: integer("id").primaryKey().notNull(),
	departmentId: integer("department_id").notNull().references(() => walmartDepartments.id),
	categoryName: text("category_name").notNull(),
	subCategoryName: text("sub_category_name").notNull(),
	productName: text("product_name").notNull(),
	isTwoDayEligible: integer("is_two_day_eligible").notNull(),
	totalOffers: integer("total_offers").notNull(),
	isbn: text("isbn").notNull(),
	issn: text("issn").notNull(),
	existsForSeller: integer("exists_for_seller").notNull(),
	rank: integer("rank").notNull(),
	brand: text("brand").notNull(),
	updateAt: timestamp("update_at", { mode: 'string' }).defaultNow(),
});

export const providerUpc = pgTable("provider_upc", {
	id: varchar("id", { length: 14 }).primaryKey().notNull(),
	ean: varchar("ean", { length: 14 }),
	upc: varchar("upc", { length: 14 }),
	product: text("product"),
	brand: text("brand"),
	category: text("category"),
	image: text("image"),
	statusCode: integer("status_code"),
	timestamp: timestamp("timestamp", { mode: 'string' }).defaultNow(),
	gtin: varchar("gtin", { length: 14 }),
});

export const fTable = pgTable("F_Table", {
	id: serial("id").primaryKey().notNull(),
	fulfilmentFee: doublePrecision("fulfilment_fee"),
	referalFeed: doublePrecision("referal_feed"),
	sku: text("sku_").references(() => inventory2.sku),
},
	(table) => {
		return {
			fTableSkuKey: unique("F_Table_sku__key").on(table.sku),
		}
	});

export const pricelistPagina = pgTable("pricelist_pagina", {
	id: serial("id").primaryKey().notNull(),
	upcProveedor: varchar("upc_proveedor", { length: 15 }).references(() => providerUpc.id),
	nombre: varchar("nombre", { length: 25 }),
	título: varchar("título"),
	precio: doublePrecision("precio"),
	asignadof1: varchar("asignadof1", { length: 25 }),
	fechaasignado: date("fechaasignado"),
	revisadof1: boolean("revisadof1"),
	revisadof2: boolean("revisadof2"),
	revisadof3: boolean("revisadof3"),
	emisión: boolean("emisión"),
	rechazado: varchar("rechazado", { length: 25 }),
	comprado: boolean("comprado"),
	revisionF1: date("revision_f1"),
	revisionF2: date("revision_f2"),
	revisionF3: date("revision_f3"),
	revisionEmision: date("revision_emision"),
	idProveedor: integer("id_proveedor").references(() => proveedores.id),
	inventario: boolean("inventario"),
	case: integer("case_"),
	itemNumber: varchar("item_number"),
	asignadof2: varchar("asignadof2", { length: 25 }),
});